apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: query-panel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      tolerations:
        - key: "node-role"
          operator: "Equal"
          value: "worker"
          effect: "NoSchedule"
      containers:
        - name: mongo
          image: mongo:latest
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: MONGO_INITDB_ROOT_PASSWORD
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
            - name: mongo-init-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc
        - name: mongo-init-script
          configMap:
            name: mongo-init-configmap

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: query-panel
spec:
  selector:
    app: mongo
  type: NodePort
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: query-panel
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path-retain

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-configmap
  namespace: query-panel
data:
  mongo-init.js: |
    db = db.getSiblingDB('admin');
    db.createUser({
      user: "ramya",
      pwd: "Ramya772",
      roles: [{ role: "root", db: "admin" }]
    });
